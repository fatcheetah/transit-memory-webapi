/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 4818.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 2.0], [4.5, 2.0], [4.6, 2.0], [4.7, 2.0], [4.8, 2.0], [4.9, 2.0], [5.0, 2.0], [5.1, 2.0], [5.2, 2.0], [5.3, 2.0], [5.4, 2.0], [5.5, 2.0], [5.6, 2.0], [5.7, 2.0], [5.8, 2.0], [5.9, 2.0], [6.0, 2.0], [6.1, 2.0], [6.2, 2.0], [6.3, 2.0], [6.4, 2.0], [6.5, 2.0], [6.6, 2.0], [6.7, 2.0], [6.8, 2.0], [6.9, 2.0], [7.0, 2.0], [7.1, 2.0], [7.2, 2.0], [7.3, 2.0], [7.4, 2.0], [7.5, 2.0], [7.6, 2.0], [7.7, 2.0], [7.8, 2.0], [7.9, 2.0], [8.0, 2.0], [8.1, 2.0], [8.2, 3.0], [8.3, 3.0], [8.4, 3.0], [8.5, 3.0], [8.6, 3.0], [8.7, 3.0], [8.8, 3.0], [8.9, 3.0], [9.0, 3.0], [9.1, 3.0], [9.2, 3.0], [9.3, 3.0], [9.4, 3.0], [9.5, 3.0], [9.6, 3.0], [9.7, 3.0], [9.8, 3.0], [9.9, 3.0], [10.0, 3.0], [10.1, 3.0], [10.2, 3.0], [10.3, 3.0], [10.4, 3.0], [10.5, 3.0], [10.6, 3.0], [10.7, 3.0], [10.8, 3.0], [10.9, 3.0], [11.0, 3.0], [11.1, 3.0], [11.2, 3.0], [11.3, 3.0], [11.4, 3.0], [11.5, 4.0], [11.6, 4.0], [11.7, 4.0], [11.8, 4.0], [11.9, 4.0], [12.0, 4.0], [12.1, 4.0], [12.2, 4.0], [12.3, 4.0], [12.4, 4.0], [12.5, 4.0], [12.6, 4.0], [12.7, 4.0], [12.8, 4.0], [12.9, 4.0], [13.0, 4.0], [13.1, 4.0], [13.2, 4.0], [13.3, 4.0], [13.4, 4.0], [13.5, 4.0], [13.6, 4.0], [13.7, 4.0], [13.8, 4.0], [13.9, 4.0], [14.0, 4.0], [14.1, 4.0], [14.2, 4.0], [14.3, 4.0], [14.4, 4.0], [14.5, 4.0], [14.6, 4.0], [14.7, 4.0], [14.8, 4.0], [14.9, 4.0], [15.0, 5.0], [15.1, 5.0], [15.2, 5.0], [15.3, 5.0], [15.4, 5.0], [15.5, 5.0], [15.6, 5.0], [15.7, 5.0], [15.8, 5.0], [15.9, 5.0], [16.0, 5.0], [16.1, 5.0], [16.2, 5.0], [16.3, 5.0], [16.4, 5.0], [16.5, 5.0], [16.6, 5.0], [16.7, 5.0], [16.8, 5.0], [16.9, 5.0], [17.0, 5.0], [17.1, 5.0], [17.2, 5.0], [17.3, 5.0], [17.4, 6.0], [17.5, 6.0], [17.6, 6.0], [17.7, 6.0], [17.8, 6.0], [17.9, 6.0], [18.0, 6.0], [18.1, 6.0], [18.2, 6.0], [18.3, 6.0], [18.4, 6.0], [18.5, 6.0], [18.6, 6.0], [18.7, 6.0], [18.8, 6.0], [18.9, 6.0], [19.0, 6.0], [19.1, 6.0], [19.2, 6.0], [19.3, 6.0], [19.4, 6.0], [19.5, 7.0], [19.6, 7.0], [19.7, 7.0], [19.8, 7.0], [19.9, 7.0], [20.0, 7.0], [20.1, 7.0], [20.2, 7.0], [20.3, 7.0], [20.4, 7.0], [20.5, 7.0], [20.6, 7.0], [20.7, 7.0], [20.8, 7.0], [20.9, 7.0], [21.0, 7.0], [21.1, 7.0], [21.2, 7.0], [21.3, 7.0], [21.4, 7.0], [21.5, 7.0], [21.6, 7.0], [21.7, 8.0], [21.8, 8.0], [21.9, 8.0], [22.0, 8.0], [22.1, 8.0], [22.2, 8.0], [22.3, 8.0], [22.4, 8.0], [22.5, 8.0], [22.6, 8.0], [22.7, 8.0], [22.8, 8.0], [22.9, 8.0], [23.0, 8.0], [23.1, 8.0], [23.2, 8.0], [23.3, 8.0], [23.4, 8.0], [23.5, 8.0], [23.6, 8.0], [23.7, 8.0], [23.8, 8.0], [23.9, 9.0], [24.0, 9.0], [24.1, 9.0], [24.2, 9.0], [24.3, 9.0], [24.4, 9.0], [24.5, 9.0], [24.6, 9.0], [24.7, 9.0], [24.8, 9.0], [24.9, 9.0], [25.0, 9.0], [25.1, 9.0], [25.2, 9.0], [25.3, 9.0], [25.4, 9.0], [25.5, 9.0], [25.6, 9.0], [25.7, 9.0], [25.8, 9.0], [25.9, 10.0], [26.0, 10.0], [26.1, 10.0], [26.2, 10.0], [26.3, 10.0], [26.4, 10.0], [26.5, 10.0], [26.6, 10.0], [26.7, 10.0], [26.8, 10.0], [26.9, 10.0], [27.0, 10.0], [27.1, 10.0], [27.2, 10.0], [27.3, 10.0], [27.4, 10.0], [27.5, 10.0], [27.6, 10.0], [27.7, 10.0], [27.8, 10.0], [27.9, 10.0], [28.0, 11.0], [28.1, 11.0], [28.2, 11.0], [28.3, 11.0], [28.4, 11.0], [28.5, 11.0], [28.6, 11.0], [28.7, 11.0], [28.8, 11.0], [28.9, 11.0], [29.0, 11.0], [29.1, 11.0], [29.2, 11.0], [29.3, 11.0], [29.4, 11.0], [29.5, 11.0], [29.6, 11.0], [29.7, 11.0], [29.8, 12.0], [29.9, 12.0], [30.0, 12.0], [30.1, 12.0], [30.2, 12.0], [30.3, 12.0], [30.4, 12.0], [30.5, 12.0], [30.6, 12.0], [30.7, 12.0], [30.8, 12.0], [30.9, 12.0], [31.0, 12.0], [31.1, 12.0], [31.2, 12.0], [31.3, 12.0], [31.4, 12.0], [31.5, 13.0], [31.6, 13.0], [31.7, 13.0], [31.8, 13.0], [31.9, 13.0], [32.0, 13.0], [32.1, 13.0], [32.2, 13.0], [32.3, 13.0], [32.4, 13.0], [32.5, 13.0], [32.6, 13.0], [32.7, 13.0], [32.8, 13.0], [32.9, 14.0], [33.0, 14.0], [33.1, 14.0], [33.2, 14.0], [33.3, 14.0], [33.4, 14.0], [33.5, 14.0], [33.6, 14.0], [33.7, 14.0], [33.8, 14.0], [33.9, 14.0], [34.0, 14.0], [34.1, 14.0], [34.2, 15.0], [34.3, 15.0], [34.4, 15.0], [34.5, 15.0], [34.6, 15.0], [34.7, 15.0], [34.8, 15.0], [34.9, 15.0], [35.0, 15.0], [35.1, 15.0], [35.2, 15.0], [35.3, 15.0], [35.4, 15.0], [35.5, 16.0], [35.6, 16.0], [35.7, 16.0], [35.8, 16.0], [35.9, 16.0], [36.0, 16.0], [36.1, 16.0], [36.2, 16.0], [36.3, 16.0], [36.4, 16.0], [36.5, 16.0], [36.6, 16.0], [36.7, 17.0], [36.8, 17.0], [36.9, 17.0], [37.0, 17.0], [37.1, 17.0], [37.2, 17.0], [37.3, 17.0], [37.4, 17.0], [37.5, 17.0], [37.6, 17.0], [37.7, 17.0], [37.8, 18.0], [37.9, 18.0], [38.0, 18.0], [38.1, 18.0], [38.2, 18.0], [38.3, 18.0], [38.4, 18.0], [38.5, 18.0], [38.6, 18.0], [38.7, 18.0], [38.8, 19.0], [38.9, 19.0], [39.0, 19.0], [39.1, 19.0], [39.2, 19.0], [39.3, 19.0], [39.4, 19.0], [39.5, 19.0], [39.6, 19.0], [39.7, 19.0], [39.8, 19.0], [39.9, 20.0], [40.0, 20.0], [40.1, 20.0], [40.2, 20.0], [40.3, 20.0], [40.4, 20.0], [40.5, 20.0], [40.6, 20.0], [40.7, 20.0], [40.8, 20.0], [40.9, 20.0], [41.0, 21.0], [41.1, 21.0], [41.2, 21.0], [41.3, 21.0], [41.4, 21.0], [41.5, 21.0], [41.6, 21.0], [41.7, 21.0], [41.8, 21.0], [41.9, 21.0], [42.0, 21.0], [42.1, 22.0], [42.2, 22.0], [42.3, 22.0], [42.4, 22.0], [42.5, 22.0], [42.6, 22.0], [42.7, 22.0], [42.8, 22.0], [42.9, 22.0], [43.0, 23.0], [43.1, 23.0], [43.2, 23.0], [43.3, 23.0], [43.4, 23.0], [43.5, 23.0], [43.6, 23.0], [43.7, 23.0], [43.8, 24.0], [43.9, 24.0], [44.0, 24.0], [44.1, 24.0], [44.2, 24.0], [44.3, 24.0], [44.4, 24.0], [44.5, 24.0], [44.6, 24.0], [44.7, 25.0], [44.8, 25.0], [44.9, 25.0], [45.0, 25.0], [45.1, 25.0], [45.2, 25.0], [45.3, 25.0], [45.4, 25.0], [45.5, 26.0], [45.6, 26.0], [45.7, 26.0], [45.8, 26.0], [45.9, 26.0], [46.0, 26.0], [46.1, 26.0], [46.2, 26.0], [46.3, 27.0], [46.4, 27.0], [46.5, 27.0], [46.6, 27.0], [46.7, 27.0], [46.8, 27.0], [46.9, 27.0], [47.0, 27.0], [47.1, 28.0], [47.2, 28.0], [47.3, 28.0], [47.4, 28.0], [47.5, 28.0], [47.6, 28.0], [47.7, 28.0], [47.8, 28.0], [47.9, 29.0], [48.0, 29.0], [48.1, 29.0], [48.2, 29.0], [48.3, 29.0], [48.4, 29.0], [48.5, 29.0], [48.6, 29.0], [48.7, 30.0], [48.8, 30.0], [48.9, 30.0], [49.0, 30.0], [49.1, 30.0], [49.2, 30.0], [49.3, 30.0], [49.4, 30.0], [49.5, 30.0], [49.6, 31.0], [49.7, 31.0], [49.8, 31.0], [49.9, 31.0], [50.0, 31.0], [50.1, 31.0], [50.2, 31.0], [50.3, 31.0], [50.4, 32.0], [50.5, 32.0], [50.6, 32.0], [50.7, 32.0], [50.8, 32.0], [50.9, 32.0], [51.0, 32.0], [51.1, 33.0], [51.2, 33.0], [51.3, 33.0], [51.4, 33.0], [51.5, 33.0], [51.6, 33.0], [51.7, 34.0], [51.8, 34.0], [51.9, 34.0], [52.0, 34.0], [52.1, 34.0], [52.2, 35.0], [52.3, 35.0], [52.4, 35.0], [52.5, 35.0], [52.6, 35.0], [52.7, 35.0], [52.8, 36.0], [52.9, 36.0], [53.0, 36.0], [53.1, 36.0], [53.2, 36.0], [53.3, 37.0], [53.4, 37.0], [53.5, 37.0], [53.6, 37.0], [53.7, 37.0], [53.8, 38.0], [53.9, 38.0], [54.0, 38.0], [54.1, 38.0], [54.2, 38.0], [54.3, 39.0], [54.4, 39.0], [54.5, 39.0], [54.6, 39.0], [54.7, 40.0], [54.8, 40.0], [54.9, 40.0], [55.0, 40.0], [55.1, 40.0], [55.2, 41.0], [55.3, 41.0], [55.4, 41.0], [55.5, 41.0], [55.6, 42.0], [55.7, 42.0], [55.8, 42.0], [55.9, 43.0], [56.0, 43.0], [56.1, 43.0], [56.2, 43.0], [56.3, 44.0], [56.4, 44.0], [56.5, 44.0], [56.6, 45.0], [56.7, 45.0], [56.8, 45.0], [56.9, 45.0], [57.0, 46.0], [57.1, 46.0], [57.2, 46.0], [57.3, 47.0], [57.4, 47.0], [57.5, 47.0], [57.6, 47.0], [57.7, 48.0], [57.8, 48.0], [57.9, 48.0], [58.0, 49.0], [58.1, 49.0], [58.2, 49.0], [58.3, 49.0], [58.4, 50.0], [58.5, 50.0], [58.6, 50.0], [58.7, 50.0], [58.8, 51.0], [58.9, 51.0], [59.0, 51.0], [59.1, 52.0], [59.2, 52.0], [59.3, 52.0], [59.4, 53.0], [59.5, 53.0], [59.6, 53.0], [59.7, 54.0], [59.8, 54.0], [59.9, 54.0], [60.0, 54.0], [60.1, 55.0], [60.2, 55.0], [60.3, 55.0], [60.4, 56.0], [60.5, 56.0], [60.6, 56.0], [60.7, 56.0], [60.8, 57.0], [60.9, 57.0], [61.0, 57.0], [61.1, 58.0], [61.2, 58.0], [61.3, 58.0], [61.4, 58.0], [61.5, 59.0], [61.6, 59.0], [61.7, 59.0], [61.8, 59.0], [61.9, 60.0], [62.0, 60.0], [62.1, 60.0], [62.2, 60.0], [62.3, 61.0], [62.4, 61.0], [62.5, 61.0], [62.6, 61.0], [62.7, 62.0], [62.8, 62.0], [62.9, 62.0], [63.0, 63.0], [63.1, 63.0], [63.2, 63.0], [63.3, 64.0], [63.4, 64.0], [63.5, 64.0], [63.6, 65.0], [63.7, 65.0], [63.8, 65.0], [63.9, 66.0], [64.0, 66.0], [64.1, 66.0], [64.2, 67.0], [64.3, 67.0], [64.4, 67.0], [64.5, 67.0], [64.6, 68.0], [64.7, 68.0], [64.8, 68.0], [64.9, 69.0], [65.0, 69.0], [65.1, 69.0], [65.2, 70.0], [65.3, 70.0], [65.4, 70.0], [65.5, 71.0], [65.6, 71.0], [65.7, 72.0], [65.8, 72.0], [65.9, 72.0], [66.0, 73.0], [66.1, 73.0], [66.2, 74.0], [66.3, 74.0], [66.4, 75.0], [66.5, 75.0], [66.6, 75.0], [66.7, 76.0], [66.8, 76.0], [66.9, 77.0], [67.0, 77.0], [67.1, 78.0], [67.2, 78.0], [67.3, 78.0], [67.4, 79.0], [67.5, 79.0], [67.6, 79.0], [67.7, 80.0], [67.8, 80.0], [67.9, 81.0], [68.0, 81.0], [68.1, 82.0], [68.2, 82.0], [68.3, 83.0], [68.4, 84.0], [68.5, 84.0], [68.6, 85.0], [68.7, 85.0], [68.8, 86.0], [68.9, 87.0], [69.0, 87.0], [69.1, 88.0], [69.2, 88.0], [69.3, 89.0], [69.4, 90.0], [69.5, 90.0], [69.6, 91.0], [69.7, 92.0], [69.8, 92.0], [69.9, 93.0], [70.0, 94.0], [70.1, 95.0], [70.2, 96.0], [70.3, 96.0], [70.4, 97.0], [70.5, 98.0], [70.6, 99.0], [70.7, 99.0], [70.8, 100.0], [70.9, 101.0], [71.0, 101.0], [71.1, 102.0], [71.2, 103.0], [71.3, 104.0], [71.4, 104.0], [71.5, 105.0], [71.6, 106.0], [71.7, 107.0], [71.8, 107.0], [71.9, 108.0], [72.0, 109.0], [72.1, 109.0], [72.2, 110.0], [72.3, 111.0], [72.4, 112.0], [72.5, 113.0], [72.6, 113.0], [72.7, 114.0], [72.8, 115.0], [72.9, 116.0], [73.0, 117.0], [73.1, 117.0], [73.2, 118.0], [73.3, 119.0], [73.4, 120.0], [73.5, 120.0], [73.6, 121.0], [73.7, 122.0], [73.8, 123.0], [73.9, 124.0], [74.0, 125.0], [74.1, 125.0], [74.2, 126.0], [74.3, 127.0], [74.4, 128.0], [74.5, 129.0], [74.6, 129.0], [74.7, 130.0], [74.8, 131.0], [74.9, 132.0], [75.0, 133.0], [75.1, 134.0], [75.2, 135.0], [75.3, 136.0], [75.4, 137.0], [75.5, 138.0], [75.6, 138.0], [75.7, 139.0], [75.8, 140.0], [75.9, 141.0], [76.0, 142.0], [76.1, 143.0], [76.2, 144.0], [76.3, 145.0], [76.4, 146.0], [76.5, 147.0], [76.6, 148.0], [76.7, 149.0], [76.8, 150.0], [76.9, 151.0], [77.0, 153.0], [77.1, 154.0], [77.2, 154.0], [77.3, 155.0], [77.4, 156.0], [77.5, 157.0], [77.6, 158.0], [77.7, 159.0], [77.8, 160.0], [77.9, 161.0], [78.0, 162.0], [78.1, 163.0], [78.2, 164.0], [78.3, 165.0], [78.4, 166.0], [78.5, 167.0], [78.6, 168.0], [78.7, 169.0], [78.8, 171.0], [78.9, 172.0], [79.0, 173.0], [79.1, 174.0], [79.2, 175.0], [79.3, 176.0], [79.4, 177.0], [79.5, 178.0], [79.6, 179.0], [79.7, 180.0], [79.8, 181.0], [79.9, 182.0], [80.0, 184.0], [80.1, 185.0], [80.2, 186.0], [80.3, 187.0], [80.4, 189.0], [80.5, 190.0], [80.6, 191.0], [80.7, 193.0], [80.8, 194.0], [80.9, 195.0], [81.0, 197.0], [81.1, 198.0], [81.2, 200.0], [81.3, 201.0], [81.4, 202.0], [81.5, 204.0], [81.6, 205.0], [81.7, 206.0], [81.8, 208.0], [81.9, 209.0], [82.0, 211.0], [82.1, 212.0], [82.2, 213.0], [82.3, 215.0], [82.4, 216.0], [82.5, 218.0], [82.6, 220.0], [82.7, 221.0], [82.8, 223.0], [82.9, 225.0], [83.0, 226.0], [83.1, 228.0], [83.2, 230.0], [83.3, 232.0], [83.4, 234.0], [83.5, 236.0], [83.6, 238.0], [83.7, 240.0], [83.8, 242.0], [83.9, 244.0], [84.0, 246.0], [84.1, 249.0], [84.2, 251.0], [84.3, 254.0], [84.4, 257.0], [84.5, 260.0], [84.6, 262.0], [84.7, 265.0], [84.8, 268.0], [84.9, 271.0], [85.0, 274.0], [85.1, 277.0], [85.2, 280.0], [85.3, 283.0], [85.4, 286.0], [85.5, 289.0], [85.6, 293.0], [85.7, 296.0], [85.8, 300.0], [85.9, 303.0], [86.0, 306.0], [86.1, 310.0], [86.2, 314.0], [86.3, 317.0], [86.4, 321.0], [86.5, 324.0], [86.6, 327.0], [86.7, 330.0], [86.8, 334.0], [86.9, 337.0], [87.0, 340.0], [87.1, 344.0], [87.2, 347.0], [87.3, 351.0], [87.4, 354.0], [87.5, 357.0], [87.6, 361.0], [87.7, 364.0], [87.8, 367.0], [87.9, 370.0], [88.0, 374.0], [88.1, 377.0], [88.2, 380.0], [88.3, 383.0], [88.4, 386.0], [88.5, 389.0], [88.6, 392.0], [88.7, 395.0], [88.8, 398.0], [88.9, 401.0], [89.0, 404.0], [89.1, 407.0], [89.2, 410.0], [89.3, 414.0], [89.4, 417.0], [89.5, 420.0], [89.6, 424.0], [89.7, 427.0], [89.8, 431.0], [89.9, 435.0], [90.0, 438.0], [90.1, 442.0], [90.2, 445.0], [90.3, 449.0], [90.4, 453.0], [90.5, 456.0], [90.6, 460.0], [90.7, 464.0], [90.8, 468.0], [90.9, 472.0], [91.0, 477.0], [91.1, 481.0], [91.2, 485.0], [91.3, 489.0], [91.4, 494.0], [91.5, 498.0], [91.6, 503.0], [91.7, 507.0], [91.8, 512.0], [91.9, 517.0], [92.0, 522.0], [92.1, 527.0], [92.2, 532.0], [92.3, 537.0], [92.4, 541.0], [92.5, 546.0], [92.6, 552.0], [92.7, 557.0], [92.8, 563.0], [92.9, 569.0], [93.0, 576.0], [93.1, 583.0], [93.2, 591.0], [93.3, 600.0], [93.4, 608.0], [93.5, 618.0], [93.6, 628.0], [93.7, 638.0], [93.8, 649.0], [93.9, 660.0], [94.0, 670.0], [94.1, 683.0], [94.2, 697.0], [94.3, 711.0], [94.4, 724.0], [94.5, 736.0], [94.6, 748.0], [94.7, 759.0], [94.8, 771.0], [94.9, 782.0], [95.0, 794.0], [95.1, 807.0], [95.2, 821.0], [95.3, 834.0], [95.4, 848.0], [95.5, 862.0], [95.6, 876.0], [95.7, 889.0], [95.8, 901.0], [95.9, 912.0], [96.0, 923.0], [96.1, 935.0], [96.2, 947.0], [96.3, 959.0], [96.4, 971.0], [96.5, 984.0], [96.6, 996.0], [96.7, 1007.0], [96.8, 1019.0], [96.9, 1032.0], [97.0, 1044.0], [97.1, 1057.0], [97.2, 1071.0], [97.3, 1087.0], [97.4, 1106.0], [97.5, 1129.0], [97.6, 1152.0], [97.7, 1177.0], [97.8, 1200.0], [97.9, 1222.0], [98.0, 1243.0], [98.1, 1262.0], [98.2, 1283.0], [98.3, 1312.0], [98.4, 1356.0], [98.5, 1423.0], [98.6, 1521.0], [98.7, 1667.0], [98.8, 1735.0], [98.9, 1836.0], [99.0, 1924.0], [99.1, 2024.0], [99.2, 2099.0], [99.3, 2182.0], [99.4, 2267.0], [99.5, 2357.0], [99.6, 2524.0], [99.7, 2830.0], [99.8, 3176.0], [99.9, 3766.0], [100.0, 4818.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 514222.0, "series": [{"data": [[0.0, 514222.0], [600.0, 6669.0], [700.0, 6006.0], [800.0, 5403.0], [900.0, 6154.0], [1000.0, 5350.0], [1100.0, 3121.0], [1200.0, 3360.0], [1300.0, 1525.0], [1400.0, 791.0], [1500.0, 453.0], [100.0, 75929.0], [1600.0, 754.0], [1700.0, 885.0], [1800.0, 790.0], [1900.0, 718.0], [2000.0, 918.0], [2100.0, 880.0], [2200.0, 853.0], [2300.0, 742.0], [2400.0, 379.0], [2500.0, 234.0], [2600.0, 219.0], [2700.0, 219.0], [2800.0, 309.0], [2900.0, 238.0], [3000.0, 137.0], [3100.0, 197.0], [200.0, 33491.0], [3200.0, 159.0], [3300.0, 126.0], [3400.0, 191.0], [3500.0, 101.0], [3700.0, 109.0], [3600.0, 38.0], [3800.0, 177.0], [3900.0, 83.0], [4000.0, 31.0], [4200.0, 153.0], [4300.0, 133.0], [4100.0, 70.0], [4400.0, 27.0], [4600.0, 2.0], [4500.0, 6.0], [300.0, 22177.0], [4800.0, 1.0], [400.0, 19459.0], [500.0, 12879.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 10318.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 665484.0, "series": [{"data": [[0.0, 665484.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 51066.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 10318.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.69791678E12, "maxY": 992.3032547803152, "series": [{"data": [[1.69791696E12, 49.98882932829109], [1.6979169E12, 49.97671994440574]], "isOverall": false, "label": "50 active users spamming for 60 seconds", "isController": false}, {"data": [[1.69791696E12, 99.62312082405309], [1.69791702E12, 99.96312885676383]], "isOverall": false, "label": "100 active users spamming for 60 seconds", "isController": false}, {"data": [[1.69791714E12, 981.0226923920287], [1.6979172E12, 992.3032547803152]], "isOverall": false, "label": "1000 active users spamming for 60 seconds", "isController": false}, {"data": [[1.69791684E12, 1.0], [1.69791678E12, 1.0]], "isOverall": false, "label": "1 active users spamming for 60 seconds", "isController": false}, {"data": [[1.69791702E12, 248.5468774956078], [1.69791708E12, 249.66081483202248]], "isOverall": false, "label": "250 active users spamming for 60 seconds", "isController": false}, {"data": [[1.69791684E12, 24.998560276426982], [1.6979169E12, 24.997388961674016]], "isOverall": false, "label": "25 active users spamming for 60 seconds", "isController": false}, {"data": [[1.69791714E12, 498.35139074290976], [1.69791708E12, 497.56626563773074]], "isOverall": false, "label": "500 active users spamming for 60 seconds", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6979172E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 4693.0, "series": [{"data": [[2.0, 762.0], [3.0, 732.0], [4.0, 1155.0], [5.0, 771.0], [6.0, 1325.0], [7.0, 1376.0], [8.0, 765.0], [9.0, 1708.0], [10.0, 1095.0], [11.0, 798.0], [12.0, 1117.0], [13.0, 761.0], [14.0, 1.0], [16.0, 2.0], [17.0, 1147.8], [18.0, 289.0], [19.0, 326.6666666666667], [20.0, 13.857142857142856], [21.0, 182.05], [22.0, 40.526315789473685], [23.0, 15.937500000000002], [24.0, 174.22222222222223], [25.0, 10.694745812476116], [26.0, 39.4], [27.0, 224.55555555555554], [28.0, 88.14285714285715], [29.0, 271.375], [30.0, 250.125], [31.0, 230.49999999999997], [33.0, 640.6], [32.0, 56.75], [35.0, 801.0], [34.0, 77.5], [37.0, 829.6], [36.0, 32.5], [38.0, 573.6666666666666], [39.0, 597.3333333333334], [41.0, 404.5], [40.0, 377.5], [43.0, 551.0], [42.0, 472.4], [45.0, 557.3333333333334], [44.0, 356.0], [46.0, 247.33333333333334], [47.0, 556.2], [49.0, 759.0], [48.0, 1346.0], [51.0, 119.99999999999999], [50.0, 21.283332503148813], [52.0, 403.0], [53.0, 1352.0], [55.0, 701.0], [54.0, 723.0], [56.0, 866.5], [58.0, 2.0], [59.0, 702.25], [60.0, 1089.25], [61.0, 120.7], [62.0, 47.22727272727273], [63.0, 108.46666666666667], [66.0, 1376.5], [65.0, 318.66666666666663], [67.0, 365.5], [64.0, 693.0], [68.0, 575.6666666666667], [71.0, 2017.0], [70.0, 693.0], [69.0, 683.0], [74.0, 611.5], [72.0, 353.5], [75.0, 3010.0], [73.0, 1900.0], [78.0, 710.3333333333334], [79.0, 1264.0], [77.0, 2895.0], [76.0, 692.0], [83.0, 580.0], [82.0, 339.8333333333333], [81.0, 132.88235294117646], [80.0, 197.75], [86.0, 16.666666666666668], [87.0, 1328.0], [85.0, 17.0], [84.0, 561.5], [89.0, 311.0], [91.0, 230.83333333333334], [90.0, 270.75], [88.0, 78.0], [94.0, 103.5], [95.0, 802.0000000000001], [93.0, 35.5], [92.0, 33.0], [96.0, 58.227272727272734], [99.0, 16.157894736842103], [97.0, 212.75], [98.0, 1335.0], [100.0, 45.08843111205015], [101.0, 1523.0], [105.0, 20.63636363636364], [104.0, 297.0], [106.0, 27.0], [107.0, 101.22857142857143], [109.0, 209.83333333333331], [108.0, 567.6], [110.0, 350.0], [111.0, 56.5], [113.0, 190.6], [112.0, 407.5], [115.0, 91.91304347826087], [114.0, 1253.0], [116.0, 167.0], [117.0, 124.80000000000001], [118.0, 197.36], [119.0, 1583.0], [122.0, 722.0], [121.0, 1240.0], [120.0, 1633.0], [126.0, 719.0], [125.0, 1021.0], [124.0, 2026.5], [135.0, 2560.0], [134.0, 1185.0], [132.0, 1521.0], [131.0, 1362.0], [129.0, 1955.0], [143.0, 641.0], [142.0, 1604.0], [139.0, 1503.0], [138.0, 2441.0], [137.0, 1280.5], [136.0, 1969.0], [151.0, 1163.0], [150.0, 2143.0], [149.0, 2810.0], [147.0, 1399.0], [146.0, 1864.0], [144.0, 1174.0], [159.0, 638.0], [158.0, 3539.0], [157.0, 2907.0], [156.0, 642.0], [155.0, 658.0], [154.0, 1259.0], [153.0, 1727.5], [152.0, 2123.0], [166.0, 1632.0], [165.0, 3015.0], [164.0, 2300.0], [163.0, 1016.0], [161.0, 698.0], [160.0, 1339.0], [175.0, 625.0], [174.0, 1956.0], [173.0, 1486.0], [172.0, 1479.5], [171.0, 690.0], [169.0, 1660.0], [168.0, 1153.5], [183.0, 612.0], [182.0, 702.0], [181.0, 1253.0], [180.0, 1343.0], [179.0, 1874.0], [178.0, 2391.0], [177.0, 997.0], [176.0, 2801.0], [191.0, 1854.0], [190.0, 1489.0], [189.0, 2616.0], [188.0, 657.0], [187.0, 1440.0], [186.0, 1521.0], [184.0, 2098.0], [192.0, 569.5], [193.0, 368.71428571428567], [194.0, 191.25], [195.0, 315.8], [196.0, 528.3333333333333], [198.0, 84.45454545454544], [197.0, 608.0], [200.0, 170.94117647058823], [201.0, 272.625], [202.0, 135.05263157894737], [203.0, 140.0], [204.0, 279.81818181818187], [205.0, 167.4], [206.0, 122.1], [207.0, 132.1764705882353], [208.0, 237.77777777777777], [214.0, 228.88888888888889], [213.0, 721.0], [212.0, 556.3333333333334], [211.0, 236.5], [215.0, 129.0], [209.0, 408.0], [210.0, 1124.0], [222.0, 860.5], [221.0, 311.66666666666663], [220.0, 760.0], [219.0, 473.6666666666667], [218.0, 384.4], [217.0, 1452.0], [216.0, 525.8571428571429], [223.0, 577.0], [231.0, 248.16666666666666], [229.0, 262.66666666666663], [228.0, 562.6666666666667], [227.0, 313.33333333333337], [226.0, 413.0], [225.0, 792.25], [224.0, 487.3333333333333], [230.0, 150.1568627450981], [237.0, 1098.0], [236.0, 192.5], [234.0, 542.75], [232.0, 624.1666666666667], [233.0, 1142.0], [238.0, 276.5], [239.0, 1741.5], [235.0, 541.0], [247.0, 431.6], [246.0, 300.5], [245.0, 509.5], [243.0, 390.1428571428571], [241.0, 79.5], [240.0, 224.4], [242.0, 555.6666666666666], [244.0, 598.0], [251.0, 102.9090909090909], [250.0, 129.76653167864092], [255.0, 346.5], [254.0, 526.6666666666667], [252.0, 892.5], [249.0, 807.6], [253.0, 1771.0], [248.0, 529.0], [268.0, 503.33333333333337], [270.0, 820.0], [271.0, 299.6666666666667], [264.0, 520.0], [269.0, 291.0], [267.0, 77.25], [266.0, 1632.0], [265.0, 194.66666666666666], [263.0, 269.33333333333337], [256.0, 1254.5], [258.0, 509.0], [259.0, 1417.0], [257.0, 221.66666666666666], [262.0, 323.0], [261.0, 508.2], [260.0, 738.6666666666667], [286.0, 615.5], [287.0, 311.5], [285.0, 60.5], [284.0, 872.2857142857143], [283.0, 225.0], [282.0, 740.0], [281.0, 1288.5], [280.0, 1672.0], [279.0, 526.6666666666666], [273.0, 178.5], [274.0, 2186.0], [275.0, 2484.0], [272.0, 948.0], [278.0, 166.0], [277.0, 504.5], [276.0, 310.8], [291.0, 240.33333333333331], [302.0, 341.25], [300.0, 46.25], [301.0, 1278.0], [299.0, 648.25], [298.0, 656.5], [303.0, 481.0], [297.0, 1249.5], [295.0, 277.3], [294.0, 281.78571428571433], [293.0, 191.5], [292.0, 114.38461538461539], [290.0, 662.75], [289.0, 485.3333333333333], [288.0, 1007.5], [318.0, 320.25], [319.0, 1506.0], [317.0, 240.66666666666669], [316.0, 762.25], [315.0, 780.0], [314.0, 521.25], [313.0, 499.0], [312.0, 45.0], [311.0, 468.25], [305.0, 266.25], [304.0, 163.25], [307.0, 287.3333333333333], [306.0, 700.0], [310.0, 305.75], [309.0, 81.0], [308.0, 616.0], [322.0, 315.5], [330.0, 678.4], [329.0, 1996.0], [331.0, 1044.0], [328.0, 827.75], [327.0, 749.75], [326.0, 444.0], [325.0, 655.4], [324.0, 281.6666666666667], [323.0, 492.0], [321.0, 1048.0], [320.0, 1458.0], [334.0, 472.0], [335.0, 1404.0], [333.0, 752.6], [349.0, 579.0], [351.0, 825.0], [348.0, 209.0], [338.0, 656.3333333333334], [337.0, 925.0], [336.0, 2096.0], [339.0, 1616.0], [347.0, 570.0], [346.0, 2137.0], [345.0, 1132.0], [344.0, 1164.5], [342.0, 713.5], [340.0, 703.4], [366.0, 363.5], [367.0, 359.5], [365.0, 556.3333333333334], [364.0, 1480.0], [363.0, 973.0], [362.0, 820.0], [361.0, 895.0], [360.0, 1265.5], [359.0, 1407.5], [353.0, 803.6666666666667], [352.0, 1086.0], [355.0, 882.0], [354.0, 494.0], [358.0, 868.5], [357.0, 1346.5], [356.0, 1306.0], [382.0, 868.0], [383.0, 342.5], [381.0, 289.5], [380.0, 1014.5], [379.0, 629.6666666666666], [378.0, 595.5], [376.0, 497.0], [377.0, 782.0], [375.0, 975.5], [368.0, 2072.0], [371.0, 1167.6666666666665], [370.0, 443.0], [369.0, 688.6666666666666], [374.0, 322.5], [373.0, 682.5], [372.0, 541.0], [397.0, 1007.0], [399.0, 919.3333333333333], [398.0, 2401.0], [396.0, 972.0], [387.0, 493.0], [386.0, 487.0], [385.0, 958.5], [384.0, 511.5], [395.0, 713.0], [394.0, 1369.0], [393.0, 504.3333333333333], [392.0, 803.0], [391.0, 319.5], [390.0, 221.66666666666669], [389.0, 300.6666666666667], [388.0, 1679.0], [414.0, 223.0], [415.0, 309.8], [413.0, 568.0], [412.0, 1601.0], [411.0, 534.5], [410.0, 980.0], [409.0, 809.6666666666666], [408.0, 149.5], [407.0, 812.6666666666666], [406.0, 1091.0], [400.0, 522.5], [401.0, 400.0], [403.0, 651.0], [402.0, 661.0], [405.0, 471.0], [404.0, 875.0], [419.0, 636.8181818181819], [430.0, 1062.0], [431.0, 1185.3333333333333], [424.0, 852.0], [428.0, 462.86666666666673], [429.0, 360.0], [418.0, 388.28571428571433], [417.0, 349.5], [416.0, 351.33333333333337], [426.0, 930.3333333333333], [427.0, 144.5], [425.0, 300.3333333333333], [423.0, 590.5714285714286], [422.0, 196.0], [421.0, 1122.3333333333335], [420.0, 305.78571428571433], [444.0, 884.6666666666666], [446.0, 1812.6666666666667], [447.0, 546.0], [440.0, 359.5], [445.0, 287.0], [442.0, 648.5], [443.0, 461.5], [441.0, 300.3333333333333], [439.0, 627.0], [432.0, 989.0], [435.0, 547.3333333333333], [434.0, 754.4], [438.0, 805.0], [437.0, 885.0], [436.0, 635.5], [462.0, 657.25], [463.0, 271.1666666666667], [461.0, 268.0], [460.0, 148.5], [458.0, 257.0], [459.0, 191.5], [457.0, 376.0], [456.0, 260.6666666666667], [454.0, 712.0], [455.0, 257.6666666666667], [449.0, 450.8333333333333], [448.0, 242.33333333333334], [451.0, 393.5], [450.0, 414.25], [453.0, 323.0], [452.0, 148.88888888888889], [477.0, 315.5], [479.0, 262.15789473684214], [478.0, 318.9523809523809], [476.0, 401.11274509803917], [467.0, 327.0], [466.0, 745.2857142857143], [465.0, 249.0], [464.0, 303.1176470588236], [474.0, 201.6818181818182], [475.0, 563.9090909090909], [473.0, 196.0], [472.0, 386.75], [471.0, 519.0], [470.0, 664.7272727272727], [468.0, 243.4], [469.0, 219.0], [494.0, 456.2], [495.0, 434.25], [493.0, 570.5], [492.0, 1326.0], [491.0, 796.5], [490.0, 248.0], [489.0, 633.0], [488.0, 694.0], [487.0, 647.5], [481.0, 111.12499999999999], [480.0, 284.5], [483.0, 176.0], [482.0, 326.5], [486.0, 260.4166666666667], [485.0, 583.0], [484.0, 758.0], [510.0, 417.5], [511.0, 308.22429906542067], [508.0, 344.74999999999994], [509.0, 1477.5], [499.0, 1498.0], [498.0, 396.75], [497.0, 117.66666666666667], [496.0, 452.25], [507.0, 319.03787878787875], [506.0, 288.48507462686575], [505.0, 287.6129032258065], [504.0, 358.1632653061224], [503.0, 359.9393939393939], [502.0, 347.0048309178743], [501.0, 339.9337748344372], [500.0, 318.01737129646864], [541.0, 385.0], [531.0, 417.66666666666663], [530.0, 247.77777777777777], [532.0, 380.22222222222223], [533.0, 324.0], [534.0, 311.2857142857142], [535.0, 314.99999999999994], [536.0, 285.6710526315789], [519.0, 305.7656249999999], [518.0, 310.25], [517.0, 296.7567567567568], [516.0, 424.0], [515.0, 328.2580645161289], [514.0, 350.61904761904754], [513.0, 332.2307692307692], [512.0, 311.3909090909092], [527.0, 360.9545454545455], [526.0, 535.5], [525.0, 355.375], [524.0, 334.70588235294116], [523.0, 518.75], [522.0, 327.76000000000005], [521.0, 862.25], [520.0, 1012.0], [538.0, 228.32298136645963], [537.0, 334.58333333333337], [540.0, 276.22222222222223], [539.0, 654.5714285714286], [542.0, 294.18421052631584], [528.0, 323.7272727272728], [543.0, 821.5], [529.0, 453.0], [568.0, 1166.0], [562.0, 809.0], [573.0, 898.0], [544.0, 211.17647058823533], [546.0, 1593.0], [545.0, 1847.0], [548.0, 294.0], [547.0, 303.0], [551.0, 705.0], [550.0, 640.0], [559.0, 871.0], [558.0, 847.0], [557.0, 960.0], [556.0, 650.0], [555.0, 823.0], [554.0, 309.0], [553.0, 706.0], [552.0, 371.0], [574.0, 1026.0], [561.0, 1150.0], [560.0, 616.0], [572.0, 1566.5], [567.0, 931.5], [565.0, 809.0], [564.0, 779.0], [600.0, 861.0], [606.0, 719.3333333333334], [607.0, 248.0], [594.0, 291.5], [593.0, 795.0], [603.0, 1867.0], [602.0, 2280.0], [601.0, 247.0], [591.0, 2203.0], [576.0, 906.5], [579.0, 2247.5], [577.0, 1926.0], [581.0, 1277.0], [580.0, 799.0], [583.0, 968.0], [582.0, 796.0], [590.0, 272.0], [589.0, 817.5], [587.0, 1784.5], [585.0, 978.0], [584.0, 1656.0], [599.0, 300.0], [598.0, 685.0], [597.0, 1267.0], [595.0, 649.0], [633.0, 2138.6666666666665], [637.0, 2043.0], [639.0, 610.0], [636.0, 1013.0], [635.0, 264.0], [623.0, 985.0], [608.0, 308.0], [610.0, 1235.0], [609.0, 894.0], [612.0, 620.0], [611.0, 893.0], [615.0, 506.5], [613.0, 661.0], [622.0, 260.0], [621.0, 1024.5], [617.0, 620.0], [616.0, 762.0], [634.0, 605.0], [631.0, 1218.0], [628.0, 2081.75], [627.0, 1008.0], [664.0, 2063.0], [669.0, 494.42857142857144], [668.0, 298.25], [671.0, 1177.0], [670.0, 799.0], [667.0, 275.0], [666.0, 823.5], [655.0, 1610.0], [643.0, 994.0], [640.0, 865.0], [645.0, 951.0], [644.0, 230.0], [647.0, 249.0], [646.0, 1236.0], [654.0, 2156.0], [653.0, 1079.0], [652.0, 242.0], [651.0, 239.0], [650.0, 821.0], [649.0, 303.0], [648.0, 788.0], [663.0, 260.0], [662.0, 1991.0], [661.0, 608.0], [660.0, 1084.0], [659.0, 223.0], [658.0, 259.0], [657.0, 1118.5], [677.0, 797.3333333333334], [672.0, 81.33333333333333], [673.0, 298.79999999999995], [676.0, 1759.0], [675.0, 1210.0], [674.0, 609.0], [678.0, 852.6666666666666], [679.0, 225.0], [696.0, 263.5], [697.0, 148.33333333333334], [698.0, 1098.5], [700.0, 928.5], [699.0, 843.0], [701.0, 219.0], [703.0, 166.0], [702.0, 820.0], [685.0, 462.75], [684.0, 671.6666666666666], [683.0, 606.0], [682.0, 205.0], [681.0, 234.5], [686.0, 350.52], [687.0, 173.875], [688.0, 293.46666666666664], [690.0, 203.83333333333331], [691.0, 592.3333333333333], [693.0, 575.6666666666666], [695.0, 1187.0], [694.0, 224.0], [689.0, 307.0909090909091], [705.0, 126.66666666666667], [704.0, 619.0], [706.0, 639.0], [707.0, 567.6666666666666], [709.0, 137.0], [734.0, 226.0], [720.0, 174.0], [731.0, 702.0], [715.0, 268.25], [717.0, 620.5], [716.0, 184.0], [718.0, 135.5], [719.0, 210.0], [721.0, 91.0], [722.0, 453.5], [723.0, 711.0], [727.0, 169.0], [726.0, 183.16666666666666], [741.0, 246.5], [738.0, 192.0], [737.0, 201.74999999999997], [742.0, 558.6666666666666], [743.0, 201.0], [744.0, 238.0], [745.0, 116.66666666666667], [748.0, 367.5], [746.0, 279.8], [749.0, 186.5], [752.0, 248.5], [753.0, 668.6666666666667], [760.0, 257.5], [761.0, 188.5], [763.0, 1316.0], [754.0, 197.0], [756.0, 368.5], [757.0, 655.5], [758.0, 329.66666666666663], [759.0, 130.0], [798.0, 1178.6666666666667], [772.0, 934.3636363636364], [770.0, 540.0], [768.0, 2767.0], [774.0, 130.66666666666666], [794.0, 2195.8333333333335], [792.0, 1035.0], [796.0, 3157.0], [795.0, 3440.0], [778.0, 437.0], [777.0, 466.0], [782.0, 1083.4285714285713], [780.0, 154.0], [783.0, 612.5], [785.0, 144.0], [786.0, 324.0], [787.0, 232.0], [799.0, 217.5], [829.0, 603.5], [817.0, 336.60714285714283], [818.0, 194.63888888888886], [816.0, 405.7647058823529], [831.0, 491.0], [830.0, 1199.0], [827.0, 1690.0], [826.0, 764.0], [825.0, 1075.0], [807.0, 938.0], [806.0, 665.0], [805.0, 591.5], [803.0, 551.5], [801.0, 1022.0], [800.0, 2671.0], [815.0, 407.00000000000006], [814.0, 114.0], [813.0, 90.0], [812.0, 122.0], [811.0, 121.0], [810.0, 120.5], [808.0, 119.0], [819.0, 300.82352941176475], [821.0, 497.5], [822.0, 640.3333333333334], [823.0, 654.0], [820.0, 342.304347826087], [860.0, 131.0], [863.0, 1069.0], [849.0, 1089.0], [848.0, 470.0], [851.0, 833.0], [850.0, 741.0], [853.0, 1090.0], [852.0, 3442.0], [862.0, 1326.0], [861.0, 2361.0], [859.0, 700.0], [858.0, 158.0], [857.0, 696.0], [856.0, 473.0], [847.0, 145.0], [834.0, 291.5], [832.0, 1113.0], [837.0, 725.0], [835.0, 163.0], [839.0, 2068.0], [838.0, 939.0], [846.0, 143.0], [845.0, 1276.0], [844.0, 1226.0], [843.0, 2055.0], [842.0, 781.0], [841.0, 821.0], [840.0, 1237.0], [855.0, 831.0], [854.0, 548.0], [888.0, 461.0], [894.0, 4693.0], [895.0, 540.0], [893.0, 718.0], [891.0, 648.0], [890.0, 763.3333333333334], [879.0, 967.5], [864.0, 422.0], [866.0, 3701.0], [865.0, 2237.0], [868.0, 683.0], [867.0, 409.0], [871.0, 718.5], [869.0, 461.0], [877.0, 994.3333333333334], [874.0, 872.0], [873.0, 804.0], [872.0, 696.0], [887.0, 453.5], [885.0, 3038.0], [882.0, 460.5], [880.0, 871.0], [926.0, 1054.5], [927.0, 1052.5], [913.0, 887.0], [912.0, 1280.75], [915.0, 703.0], [914.0, 684.0], [925.0, 1987.0], [924.0, 445.0], [923.0, 439.0], [921.0, 448.0], [920.0, 567.0], [902.0, 1788.5], [900.0, 965.0], [899.0, 3460.0], [897.0, 500.5], [911.0, 1205.0], [909.0, 1879.0], [905.0, 1990.3333333333333], [917.0, 564.0], [916.0, 635.0], [957.0, 726.0], [959.0, 1514.0], [956.0, 601.5], [954.0, 473.3333333333333], [953.0, 1575.5], [952.0, 1189.0], [943.0, 1390.0], [928.0, 1053.0], [931.0, 1052.0], [930.0, 747.5], [942.0, 1130.5], [941.0, 443.0], [939.0, 2573.0], [938.0, 2399.0], [937.0, 1343.2], [936.0, 777.0], [948.0, 434.0], [947.0, 497.0], [945.0, 436.0], [990.0, 1098.75], [991.0, 2408.0], [986.0, 822.75], [967.0, 1004.5], [966.0, 873.0], [965.0, 712.5], [962.0, 895.25], [983.0, 429.0], [981.0, 539.8], [978.0, 483.5], [974.0, 430.6666666666667], [973.0, 858.0], [969.0, 1168.0], [1020.0, 2217.0], [1023.0, 527.0000000000001], [1009.0, 599.4379562043791], [1008.0, 832.7142857142858], [1011.0, 733.5384615384615], [1010.0, 627.4705882352941], [1013.0, 583.483870967742], [1012.0, 835.6923076923076], [1022.0, 779.0975609756097], [1021.0, 705.4399999999996], [1019.0, 596.8333333333335], [1018.0, 626.1470588235295], [1017.0, 597.2404371584703], [1016.0, 628.6456692913382], [1007.0, 731.3653846153845], [1006.0, 782.12], [1005.0, 676.6202531645567], [1004.0, 669.9337979094068], [1003.0, 776.9873417721518], [1002.0, 762.5517241379305], [1001.0, 622.9555555555559], [1000.0, 726.7137341918225], [1015.0, 571.9523809523812], [1014.0, 602.5652173913043], [1028.0, 644.5], [1054.0, 399.85], [1058.0, 281.75], [1060.0, 321.0], [1056.0, 411.6666666666667], [1024.0, 773.0], [1026.0, 487.5405405405406], [1030.0, 704.3846153846155], [1032.0, 938.5], [1034.0, 586.2], [1036.0, 702.3749999999999], [1052.0, 324.6333333333333], [1050.0, 281.3703703703703], [1048.0, 906.3333333333334], [1046.0, 845.1666666666666], [1044.0, 300.5416666666667], [1042.0, 353.28571428571433], [1040.0, 677.6666666666667], [1029.0, 493.27200000000005], [1061.0, 269.5285714285714], [1059.0, 380.2142857142858], [1057.0, 265.0714285714286], [1055.0, 233.00000000000006], [1025.0, 480.08823529411774], [1027.0, 579.8571428571428], [1031.0, 548.4716981132074], [1033.0, 491.6296296296296], [1035.0, 557.3902439024391], [1039.0, 521.6046511627907], [1037.0, 497.24193548387103], [1053.0, 300.06666666666666], [1051.0, 427.33333333333337], [1049.0, 1079.5], [1047.0, 397.8679245283019], [1045.0, 641.625], [1043.0, 376.10344827586204], [1041.0, 1351.0], [1.0, 2.85024658573594]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[250.58695939289785, 158.83100783085618]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1061.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11677.083333333334, "minX": 1.69791678E12, "maxY": 1.76518043565E9, "series": [{"data": [[1.69791714E12, 1.1492098865833333E9], [1.69791696E12, 1.7350529025166667E9], [1.69791702E12, 1.62505065515E9], [1.69791684E12, 5.9915049805E8], [1.6979169E12, 1.76518043565E9], [1.6979172E12, 8.303980803333334E8], [1.69791678E12, 6.024867143333333E7], [1.69791708E12, 1.39892017185E9]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69791714E12, 223869.35], [1.69791696E12, 336268.81666666665], [1.69791702E12, 315265.36666666664], [1.69791684E12, 116163.31666666667], [1.6979169E12, 342037.01666666666], [1.6979172E12, 158240.96666666667], [1.69791678E12, 11677.083333333334], [1.69791708E12, 271746.31666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6979172E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2.9937251620999787, "minX": 1.69791678E12, "maxY": 730.1231075512734, "series": [{"data": [[1.69791714E12, 393.25983547535714], [1.69791696E12, 26.600485175985416], [1.69791702E12, 61.78424567329348], [1.69791684E12, 8.07949623649129], [1.6979169E12, 13.082738282253988], [1.6979172E12, 730.1231075512734], [1.69791678E12, 2.9937251620999787], [1.69791708E12, 163.80784993978088]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6979172E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.20853377954402896, "minX": 1.69791678E12, "maxY": 85.85537910705693, "series": [{"data": [[1.69791714E12, 47.40353269763758], [1.69791696E12, 3.2203338126988084], [1.69791702E12, 7.357679614508675], [1.69791684E12, 0.9469113998570303], [1.6979169E12, 1.6065736482819755], [1.6979172E12, 85.85537910705693], [1.69791678E12, 0.20853377954402896], [1.69791708E12, 19.418570581150885]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6979172E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.69791678E12, "maxY": 0.09583451526326134, "series": [{"data": [[1.69791714E12, 0.09583451526326134], [1.69791696E12, 0.005672491683734893], [1.69791702E12, 2.633984598937106E-4], [1.69791684E12, 1.2615112905260526E-4], [1.6979169E12, 1.0710919425323498E-4], [1.6979172E12, 0.0], [1.69791678E12, 0.002509935160008371], [1.69791708E12, 0.045109740971760424]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6979172E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.69791678E12, "maxY": 4818.0, "series": [{"data": [[1.69791714E12, 4818.0], [1.69791696E12, 339.0], [1.69791702E12, 883.0], [1.69791684E12, 106.0], [1.6979169E12, 164.0], [1.6979172E12, 4693.0], [1.69791678E12, 151.0], [1.69791708E12, 2098.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69791714E12, 1364.9000000000015], [1.69791696E12, 111.0], [1.69791702E12, 318.90000000000146], [1.69791684E12, 26.0], [1.6979169E12, 51.0], [1.6979172E12, 1794.9000000000015], [1.69791678E12, 7.0], [1.69791708E12, 769.9000000000015]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69791714E12, 3434.880000000019], [1.69791696E12, 228.0], [1.69791702E12, 662.9900000000016], [1.69791684E12, 54.0], [1.6979169E12, 106.0], [1.6979172E12, 3638.970000000005], [1.69791678E12, 17.0], [1.69791708E12, 1604.9900000000016]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69791714E12, 2187.0], [1.69791696E12, 146.0], [1.69791702E12, 422.0], [1.69791684E12, 34.0], [1.6979169E12, 68.0], [1.6979172E12, 2304.9000000000015], [1.69791678E12, 10.0], [1.69791708E12, 1016.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69791714E12, 11.0], [1.69791696E12, 0.0], [1.69791702E12, 0.0], [1.69791684E12, 0.0], [1.6979169E12, 0.0], [1.6979172E12, 27.0], [1.69791678E12, 0.0], [1.69791708E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69791714E12, 452.0], [1.69791696E12, 33.0], [1.69791702E12, 95.0], [1.69791684E12, 7.0], [1.6979169E12, 15.0], [1.6979172E12, 527.0], [1.69791678E12, 2.0], [1.69791708E12, 223.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6979172E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 73.0, "maxY": 1264.0, "series": [{"data": [[73.0, 1264.0], [77.0, 4.0], [121.0, 2.0], [254.0, 2.0], [310.0, 2.0], [304.0, 2.0], [315.0, 2.0], [333.0, 2.0], [336.0, 2.0], [342.0, 2.0], [350.0, 2.0], [351.0, 2.0], [339.0, 2.0], [349.0, 2.0], [337.0, 2.0], [340.0, 2.0], [347.0, 2.0], [345.0, 2.0], [352.0, 2.0], [361.0, 2.0], [362.0, 2.0], [360.0, 2.0], [358.0, 2.0], [359.0, 2.0], [353.0, 2.0], [354.0, 2.0], [366.0, 2.0], [356.0, 2.0], [365.0, 2.0], [364.0, 2.0], [357.0, 2.0], [355.0, 2.0], [373.0, 2.0], [375.0, 2.0], [370.0, 2.0], [368.0, 2.0], [382.0, 2.0], [379.0, 2.0], [369.0, 2.0], [374.0, 2.0], [1187.0, 681.0], [1221.0, 876.0], [1332.0, 498.5], [1337.0, 8.0], [1335.0, 495.0], [1339.0, 503.0], [1341.0, 492.0], [1283.0, 525.0], [1294.0, 534.5], [1304.0, 625.5], [1309.0, 487.0], [1306.0, 520.0], [1343.0, 491.0], [1321.0, 489.0], [1325.0, 520.0], [1322.0, 506.0], [1342.0, 509.5], [1400.0, 210.0], [1376.0, 357.0], [1407.0, 491.0], [1346.0, 524.0], [1344.0, 497.0], [1350.0, 482.0], [1357.0, 517.0], [1358.0, 478.0], [1406.0, 487.5], [1402.0, 501.5], [1380.0, 515.5], [1381.0, 507.0], [1378.0, 495.5], [1374.0, 482.0], [1365.0, 479.0], [1369.0, 501.0], [1375.0, 500.0], [1360.0, 503.0], [1362.0, 503.5], [1361.0, 477.0], [1364.0, 501.5], [1462.0, 222.0], [1467.0, 233.0], [1469.0, 504.0], [1456.0, 232.0], [1415.0, 503.0], [1411.0, 487.0], [1413.0, 512.0], [1421.0, 474.0], [1441.0, 487.0], [1437.0, 485.0], [1424.0, 492.5], [1457.0, 478.0], [1458.0, 510.5], [1444.0, 493.5], [1430.0, 504.0], [1431.0, 494.0], [1522.0, 202.0], [1490.0, 226.5], [1494.0, 240.0], [1530.0, 233.0], [1532.0, 223.0], [1525.0, 222.0], [1529.0, 220.0], [1526.0, 464.0], [1520.0, 227.5], [1476.0, 470.0], [1534.0, 227.5], [1507.0, 232.0], [1524.0, 219.5], [1541.0, 223.0], [1588.0, 225.0], [1557.0, 218.5], [1582.0, 223.0], [1568.0, 227.0], [1573.0, 222.0], [1581.0, 225.0], [1577.0, 227.0], [1591.0, 222.0], [1593.0, 207.0], [1599.0, 218.0], [1594.0, 221.0], [1551.0, 231.0], [1550.0, 235.5], [1544.0, 228.0], [1543.0, 215.0], [1555.0, 218.5], [1538.0, 225.0], [1537.0, 225.0], [1583.0, 219.0], [1563.0, 229.0], [1560.0, 234.5], [1600.0, 222.0], [1615.0, 221.0], [1621.0, 231.0], [1647.0, 211.0], [1638.0, 222.0], [1604.0, 231.0], [1605.0, 222.0], [1610.0, 225.0], [1602.0, 222.0], [1603.0, 221.0], [1618.0, 232.0], [1663.0, 212.0], [1633.0, 217.0], [1627.0, 232.0], [1629.0, 217.0], [1624.0, 210.0], [1711.0, 105.0], [1726.0, 225.5], [1671.0, 220.0], [1765.0, 98.0], [1761.0, 102.0], [1848.0, 101.0], [1815.0, 100.0], [1825.0, 92.0], [1845.0, 97.0], [1820.0, 94.0], [1843.0, 97.0], [1838.0, 103.0], [1851.0, 98.0], [1817.0, 97.0], [1837.0, 97.0], [1829.0, 97.0], [1855.0, 98.0], [1869.0, 93.0], [1861.0, 96.0], [1858.0, 92.0], [1907.0, 90.0], [1905.0, 93.0], [1883.0, 93.0], [1888.0, 96.5], [1898.0, 91.0], [1856.0, 92.0], [1863.0, 97.0], [1864.0, 90.0], [1919.0, 95.0], [1930.0, 92.0], [1959.0, 93.0], [1923.0, 90.0], [1980.0, 88.0], [1975.0, 87.0], [1938.0, 88.0], [1982.0, 87.0], [1950.0, 87.0], [1951.0, 89.0], [2017.0, 55.0], [1999.0, 35.0], [2001.0, 44.0], [2003.0, 88.0], [2031.0, 83.0], [2043.0, 84.0], [2039.0, 85.0], [2015.0, 85.0], [2019.0, 86.0], [2018.0, 85.0], [2030.0, 84.0], [1997.0, 85.0], [1993.0, 84.0], [1990.0, 85.0], [1984.0, 85.0], [1995.0, 91.0], [2061.0, 33.0], [2099.0, 34.0], [2092.0, 21.0], [2111.0, 33.0], [2106.0, 32.5], [2118.0, 32.0], [2128.0, 32.0], [2140.0, 33.0], [2131.0, 33.0], [2098.0, 34.0], [2095.0, 80.0], [2160.0, 31.0], [2158.0, 31.0], [2150.0, 34.0], [2174.0, 32.0], [2171.0, 32.0], [2172.0, 32.0], [2166.0, 32.0], [2112.0, 34.0], [2091.0, 49.0], [2090.0, 80.0], [2292.0, 7.0], [2265.0, 7.0], [2268.0, 30.0], [2191.0, 7.0], [2259.0, 7.0], [2294.0, 13.0], [2295.0, 30.0], [2282.0, 7.0], [2290.0, 20.0], [2291.0, 30.0], [2289.0, 30.0], [2284.0, 30.0], [2285.0, 29.0], [2288.0, 30.0], [2275.0, 15.0], [2281.0, 30.0], [2204.0, 32.0], [2272.0, 30.0], [2274.0, 29.0], [2194.0, 33.0], [2196.0, 31.0], [2200.0, 33.0], [2301.0, 7.0], [2245.0, 32.0], [2303.0, 29.0], [2251.0, 30.0], [2256.0, 30.0], [2298.0, 15.0], [2297.0, 29.0], [2300.0, 30.0], [2296.0, 21.0], [2229.0, 7.0], [2189.0, 31.0], [2185.0, 31.0], [2236.0, 31.0], [2233.0, 32.0], [2208.0, 12.0], [2228.0, 32.0], [2218.0, 32.0], [2311.0, 14.0], [2349.0, 7.0], [2305.0, 7.0], [2308.0, 13.0], [2310.0, 15.0], [2363.0, 10.0], [2304.0, 30.0], [2359.0, 10.0], [2361.0, 14.0], [2358.0, 7.0], [2356.0, 7.0], [2354.0, 9.0], [2351.0, 7.0], [2350.0, 14.0], [2352.0, 14.0], [2353.0, 11.0], [2357.0, 7.0], [2345.0, 11.0], [2348.0, 11.0], [2346.0, 12.0], [2322.0, 9.0], [2312.0, 7.0], [2313.0, 7.0], [2316.0, 10.0], [2315.0, 7.0], [2314.0, 15.0], [2381.0, 7.0], [2370.0, 7.0], [2333.0, 12.0], [2368.0, 10.0], [2335.0, 15.0], [2327.0, 7.0], [2326.0, 8.0], [2324.0, 14.0], [2325.0, 15.0], [2331.0, 11.0], [2330.0, 7.0], [2332.0, 10.0], [2375.0, 7.0], [2373.0, 14.0], [2319.0, 7.0], [2321.0, 7.0], [2342.0, 9.0], [2341.0, 10.0], [2340.0, 15.0], [2338.0, 15.0], [2336.0, 15.0], [2343.0, 7.0], [2344.0, 10.0], [2382.0, 9.0], [2385.0, 7.0], [2386.0, 14.0], [2397.0, 14.0], [2399.0, 14.0], [2394.0, 14.0], [2393.0, 14.0], [2392.0, 14.0], [2384.0, 14.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2399.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 73.0, "maxY": 115.0, "series": [{"data": [[73.0, 115.0], [77.0, 1.0], [121.0, 0.0], [254.0, 0.0], [310.0, 0.0], [304.0, 0.0], [315.0, 0.0], [333.0, 0.0], [336.0, 0.0], [342.0, 0.0], [350.0, 0.0], [351.0, 0.0], [339.0, 0.0], [349.0, 0.0], [337.0, 0.0], [340.0, 0.0], [347.0, 0.0], [345.0, 0.0], [352.0, 0.0], [361.0, 0.0], [362.0, 0.0], [360.0, 0.0], [358.0, 0.0], [359.0, 0.0], [353.0, 0.0], [354.0, 0.0], [366.0, 0.0], [356.0, 0.0], [365.0, 0.0], [364.0, 0.0], [357.0, 0.0], [355.0, 0.0], [373.0, 0.0], [375.0, 0.0], [370.0, 0.0], [368.0, 0.0], [382.0, 0.0], [379.0, 0.0], [369.0, 0.0], [374.0, 0.0], [1187.0, 76.0], [1221.0, 94.0], [1332.0, 76.0], [1337.0, 1.0], [1335.0, 73.0], [1339.0, 75.0], [1341.0, 76.0], [1283.0, 77.0], [1294.0, 78.0], [1304.0, 82.0], [1309.0, 82.0], [1306.0, 73.0], [1343.0, 78.0], [1321.0, 71.0], [1325.0, 78.0], [1322.0, 76.0], [1342.0, 72.0], [1400.0, 55.0], [1376.0, 67.0], [1407.0, 71.0], [1346.0, 75.0], [1344.0, 74.0], [1350.0, 69.0], [1357.0, 76.0], [1358.0, 73.0], [1406.0, 73.0], [1402.0, 75.0], [1380.0, 78.0], [1381.0, 73.0], [1378.0, 72.0], [1374.0, 78.0], [1365.0, 78.0], [1369.0, 75.0], [1375.0, 76.0], [1360.0, 75.0], [1362.0, 69.0], [1361.0, 73.0], [1364.0, 73.0], [1462.0, 28.0], [1467.0, 36.0], [1469.0, 75.0], [1456.0, 33.0], [1415.0, 72.0], [1411.0, 75.0], [1413.0, 75.0], [1421.0, 74.0], [1441.0, 73.0], [1437.0, 74.0], [1424.0, 73.0], [1457.0, 75.0], [1458.0, 75.0], [1444.0, 77.0], [1430.0, 77.0], [1431.0, 77.0], [1522.0, 26.0], [1490.0, 28.0], [1494.0, 32.0], [1530.0, 33.0], [1532.0, 30.0], [1525.0, 31.5], [1529.0, 34.0], [1526.0, 77.0], [1520.0, 34.0], [1476.0, 74.0], [1534.0, 31.0], [1507.0, 33.0], [1524.0, 31.0], [1541.0, 34.0], [1588.0, 32.0], [1557.0, 32.0], [1582.0, 29.0], [1568.0, 35.0], [1573.0, 30.0], [1581.0, 33.0], [1577.0, 28.0], [1591.0, 33.0], [1593.0, 26.0], [1599.0, 32.0], [1594.0, 34.0], [1551.0, 33.0], [1550.0, 31.0], [1544.0, 30.0], [1543.0, 26.0], [1555.0, 31.5], [1538.0, 28.0], [1537.0, 34.0], [1583.0, 30.0], [1563.0, 36.0], [1560.0, 34.0], [1600.0, 29.0], [1615.0, 31.0], [1621.0, 29.0], [1647.0, 30.0], [1638.0, 34.0], [1604.0, 39.0], [1605.0, 32.0], [1610.0, 34.0], [1602.0, 34.0], [1603.0, 27.0], [1618.0, 32.0], [1663.0, 28.0], [1633.0, 31.0], [1627.0, 31.0], [1629.0, 31.0], [1624.0, 33.0], [1711.0, 11.0], [1726.0, 27.0], [1671.0, 28.0], [1765.0, 12.0], [1761.0, 13.0], [1848.0, 12.0], [1815.0, 12.0], [1825.0, 11.0], [1845.0, 11.0], [1820.0, 11.0], [1843.0, 11.0], [1838.0, 11.0], [1851.0, 11.0], [1817.0, 12.0], [1837.0, 12.0], [1829.0, 11.0], [1855.0, 11.0], [1869.0, 11.0], [1861.0, 11.0], [1858.0, 12.0], [1907.0, 11.0], [1905.0, 11.0], [1883.0, 11.0], [1888.0, 11.0], [1898.0, 11.0], [1856.0, 11.0], [1863.0, 11.0], [1864.0, 11.0], [1919.0, 11.0], [1930.0, 11.0], [1959.0, 11.0], [1923.0, 11.0], [1980.0, 11.0], [1975.0, 10.0], [1938.0, 10.0], [1982.0, 11.0], [1950.0, 10.0], [1951.0, 11.0], [2017.0, 9.0], [1999.0, 5.0], [2001.0, 6.0], [2003.0, 11.0], [2031.0, 11.0], [2043.0, 11.0], [2039.0, 11.0], [2015.0, 11.0], [2019.0, 10.0], [2018.0, 11.0], [2030.0, 11.0], [1997.0, 10.0], [1993.0, 10.0], [1990.0, 10.0], [1984.0, 10.0], [1995.0, 11.0], [2061.0, 5.0], [2099.0, 5.0], [2092.0, 4.0], [2111.0, 5.0], [2106.0, 5.0], [2118.0, 5.0], [2128.0, 5.0], [2140.0, 5.0], [2131.0, 5.0], [2098.0, 5.0], [2095.0, 10.0], [2160.0, 5.0], [2158.0, 5.0], [2150.0, 5.0], [2174.0, 5.0], [2171.0, 4.0], [2172.0, 4.0], [2166.0, 5.0], [2112.0, 5.0], [2091.0, 9.0], [2090.0, 10.0], [2292.0, 1.0], [2265.0, 1.0], [2268.0, 4.0], [2191.0, 1.0], [2259.0, 1.0], [2294.0, 3.0], [2295.0, 4.0], [2282.0, 1.0], [2290.0, 3.0], [2291.0, 4.0], [2289.0, 4.0], [2284.0, 4.0], [2285.0, 4.0], [2288.0, 4.0], [2275.0, 2.0], [2281.0, 4.0], [2204.0, 4.0], [2272.0, 4.0], [2274.0, 4.0], [2194.0, 5.0], [2196.0, 4.0], [2200.0, 5.0], [2301.0, 1.0], [2245.0, 4.0], [2303.0, 4.0], [2251.0, 4.0], [2256.0, 4.0], [2298.0, 2.0], [2297.0, 4.0], [2300.0, 4.0], [2296.0, 3.0], [2229.0, 1.0], [2189.0, 5.0], [2185.0, 4.0], [2236.0, 5.0], [2233.0, 4.0], [2208.0, 2.0], [2228.0, 5.0], [2218.0, 4.0], [2311.0, 2.0], [2349.0, 1.0], [2305.0, 1.0], [2308.0, 3.0], [2310.0, 2.0], [2363.0, 2.0], [2304.0, 4.0], [2359.0, 2.0], [2361.0, 2.0], [2358.0, 1.0], [2356.0, 1.0], [2354.0, 1.0], [2351.0, 1.0], [2350.0, 2.0], [2352.0, 2.0], [2353.0, 2.0], [2357.0, 1.0], [2345.0, 2.0], [2348.0, 2.0], [2346.0, 2.0], [2322.0, 1.0], [2312.0, 1.0], [2313.0, 1.0], [2316.0, 2.0], [2315.0, 1.0], [2314.0, 2.0], [2381.0, 1.0], [2370.0, 1.0], [2333.0, 2.0], [2368.0, 2.0], [2335.0, 2.0], [2327.0, 1.0], [2326.0, 1.0], [2324.0, 2.0], [2325.0, 2.0], [2331.0, 2.0], [2330.0, 1.0], [2332.0, 2.0], [2375.0, 1.0], [2373.0, 2.0], [2319.0, 1.0], [2321.0, 1.0], [2342.0, 1.0], [2341.0, 2.0], [2340.0, 2.0], [2338.0, 2.0], [2336.0, 2.0], [2343.0, 1.0], [2344.0, 2.0], [2382.0, 1.0], [2385.0, 1.0], [2386.0, 2.0], [2397.0, 2.0], [2399.0, 2.0], [2394.0, 2.0], [2393.0, 2.0], [2392.0, 2.0], [2384.0, 2.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2399.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 79.7, "minX": 1.69791678E12, "maxY": 2334.483333333333, "series": [{"data": [[1.69791714E12, 1535.9666666666667], [1.69791696E12, 2295.5333333333333], [1.69791702E12, 2153.866666666667], [1.69791684E12, 793.1], [1.6979169E12, 2334.483333333333], [1.6979172E12, 1063.2833333333333], [1.69791678E12, 79.7], [1.69791708E12, 1858.5333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6979172E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 79.68333333333334, "minX": 1.69791678E12, "maxY": 2334.0666666666666, "series": [{"data": [[1.69791714E12, 1527.6333333333334], [1.69791696E12, 2294.7], [1.69791702E12, 2151.366666666667], [1.69791684E12, 792.7], [1.6979169E12, 2334.0666666666666], [1.6979172E12, 1079.95], [1.69791678E12, 79.68333333333334], [1.69791708E12, 1854.3666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6979172E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 79.68333333333334, "minX": 1.69791678E12, "maxY": 2334.0666666666666, "series": [{"data": [[1.69791714E12, 1527.6333333333334], [1.69791696E12, 2294.7], [1.69791702E12, 2151.366666666667], [1.69791684E12, 792.7], [1.6979169E12, 2334.0666666666666], [1.6979172E12, 1079.95], [1.69791678E12, 79.68333333333334], [1.69791708E12, 1854.3666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6979172E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 79.68333333333334, "minX": 1.69791678E12, "maxY": 2334.0666666666666, "series": [{"data": [[1.69791714E12, 1527.6333333333334], [1.69791696E12, 2294.7], [1.69791702E12, 2151.366666666667], [1.69791684E12, 792.7], [1.6979169E12, 2334.0666666666666], [1.6979172E12, 1079.95], [1.69791678E12, 79.68333333333334], [1.69791708E12, 1854.3666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6979172E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

